generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum BotLevel {
  MILD
  MODERATE
  EXTREME
}

enum PullRequestStatus {
  PENDING
  APPROVED
  REJECTED
  MERGED
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String?
  githubId     String?       @unique
  providerId   String?       @unique
  subscription Subscription?
  repositories Repository[]
  reviews      Review[]
  onboarded    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String             @unique
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      SubscriptionPlan   @default(FREE)
  status    SubscriptionStatus @default(ACTIVE)
  maxReviews Int               @default(100)
  startDate DateTime           @default(now())
  endDate   DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Repository {
  id       String  @id @default(uuid())
  name     String
  url      String
  language String?
  hasWiki  Boolean @default(false)
  githubId String? @unique

  botConfigId String?
  botConfig   BotConfig?

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  pullRequests PullRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BotConfig {
  id                String            @id @default(uuid())
  repositoryId      String            @unique
  repository        Repository        @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  grumpinessLevel   BotLevel          @default(MODERATE)
  technicalityLevel BotLevel          @default(MODERATE)
  detailLevel       BotLevel          @default(MODERATE)
  language          String            @default("en")
  autoApprove       Boolean           @default(false)
  ignoredExtensions String[]          @default(["md", "txt", "lock", "json", "yml", "yaml", "env", "toml", "ini", "png", "jpg", "jpeg", "gif", "svg", "ico", "webp", "mp4", "webm", "mp3", "wav", "d.ts", "map", "snap", "golden", "wasm", "woff", "woff2", "ttf", "otf", "eot", "scss", "sass"])
  reviewFocusAreas  ReviewFocusArea[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model ReviewFocusArea {
  id          String    @id @default(uuid())
  name        String // e.g., "Code Style", "Best Practices", "Documentation"
  botConfigId String
  botConfig   BotConfig @relation(fields: [botConfigId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([name, botConfigId])
}

model PullRequest {
  id                String            @id @default(uuid())
  title             String?
  body              String?
  url               String?
  htmlUrl           String?
  diffUrl           String?
  patchUrl          String?
  issueUrl          String?
  commitsUrl        String?
  reviewCommentsUrl String?
  commentsUrl       String?
  statusesUrl       String?
  isMerged          Boolean           @default(false)
  isMergeable       Boolean           @default(false)
  isRebaseable      Boolean           @default(false)
  number            Int?
  state             String?
  commits           Int?
  additions         Int?
  deletions         Int?
  changedFiles      Int?
  isDraft           Boolean           @default(false)
  githubId          String?           @unique
  repositoryId      String
  repository        Repository        @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  status            PullRequestStatus @default(PENDING)
  reviews           Review[]

  comments Comment[]

  mergedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id            String      @id @default(uuid())
  content       String
  filePath      String?
  lineNumber    Int?
  pullRequestId String
  pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Review {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment       String?
  filename      String?
  patch         String?
  pullRequestId String
  pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
